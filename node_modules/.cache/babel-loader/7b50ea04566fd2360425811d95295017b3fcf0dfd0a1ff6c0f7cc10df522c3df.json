{"ast":null,"code":"import{useState,useEffect}from'react';const useDeviceType=()=>{const[deviceType,setDeviceType]=useState({isMobile:false,isTablet:false,isDesktop:true});useEffect(()=>{const checkDeviceType=()=>{if(typeof window==='undefined'){// SSR safe default\nsetDeviceType({isMobile:false,isTablet:false,isDesktop:true});return;}const width=window.innerWidth;const isMobile=width<768;const isTablet=width>=768&&width<1024;const isDesktop=width>=1024;setDeviceType({isMobile,isTablet,isDesktop});};// Check on mount\ncheckDeviceType();// Add event listener for resize\nwindow.addEventListener('resize',checkDeviceType);// Cleanup\nreturn()=>{window.removeEventListener('resize',checkDeviceType);};},[]);return deviceType;};export default useDeviceType;","map":{"version":3,"names":["useState","useEffect","useDeviceType","deviceType","setDeviceType","isMobile","isTablet","isDesktop","checkDeviceType","window","width","innerWidth","addEventListener","removeEventListener"],"sources":["C:/Users/PC/Documents/GitHub/Apenas-um-Catolico/src/components/useDeviceType.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { DeviceType } from '../types';\r\n\r\nconst useDeviceType = (): DeviceType => {\r\n  const [deviceType, setDeviceType] = useState<DeviceType>({\r\n    isMobile: false,\r\n    isTablet: false,\r\n    isDesktop: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    const checkDeviceType = (): void => {\r\n      if (typeof window === 'undefined') {\r\n        // SSR safe default\r\n        setDeviceType({\r\n          isMobile: false,\r\n          isTablet: false,\r\n          isDesktop: true\r\n        });\r\n        return;\r\n      }\r\n\r\n      const width = window.innerWidth;\r\n      const isMobile = width < 768;\r\n      const isTablet = width >= 768 && width < 1024;\r\n      const isDesktop = width >= 1024;\r\n\r\n      setDeviceType({\r\n        isMobile,\r\n        isTablet,\r\n        isDesktop\r\n      });\r\n    };\r\n\r\n    // Check on mount\r\n    checkDeviceType();\r\n\r\n    // Add event listener for resize\r\n    window.addEventListener('resize', checkDeviceType);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener('resize', checkDeviceType);\r\n    };\r\n  }, []);\r\n\r\n  return deviceType;\r\n};\r\n\r\nexport default useDeviceType; "],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAG3C,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAkB,CACtC,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGJ,QAAQ,CAAa,CACvDK,QAAQ,CAAE,KAAK,CACfC,QAAQ,CAAE,KAAK,CACfC,SAAS,CAAE,IACb,CAAC,CAAC,CAEFN,SAAS,CAAC,IAAM,CACd,KAAM,CAAAO,eAAe,CAAGA,CAAA,GAAY,CAClC,GAAI,MAAO,CAAAC,MAAM,GAAK,WAAW,CAAE,CACjC;AACAL,aAAa,CAAC,CACZC,QAAQ,CAAE,KAAK,CACfC,QAAQ,CAAE,KAAK,CACfC,SAAS,CAAE,IACb,CAAC,CAAC,CACF,OACF,CAEA,KAAM,CAAAG,KAAK,CAAGD,MAAM,CAACE,UAAU,CAC/B,KAAM,CAAAN,QAAQ,CAAGK,KAAK,CAAG,GAAG,CAC5B,KAAM,CAAAJ,QAAQ,CAAGI,KAAK,EAAI,GAAG,EAAIA,KAAK,CAAG,IAAI,CAC7C,KAAM,CAAAH,SAAS,CAAGG,KAAK,EAAI,IAAI,CAE/BN,aAAa,CAAC,CACZC,QAAQ,CACRC,QAAQ,CACRC,SACF,CAAC,CAAC,CACJ,CAAC,CAED;AACAC,eAAe,CAAC,CAAC,CAEjB;AACAC,MAAM,CAACG,gBAAgB,CAAC,QAAQ,CAAEJ,eAAe,CAAC,CAElD;AACA,MAAO,IAAM,CACXC,MAAM,CAACI,mBAAmB,CAAC,QAAQ,CAAEL,eAAe,CAAC,CACvD,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAAL,UAAU,CACnB,CAAC,CAED,cAAe,CAAAD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}